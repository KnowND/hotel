import DAO.connection.DataSourcePool;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * Created by edik2 on 23.01.2018.
 */
public abstract class BaseDAOTest {

    static protected DataSourcePool dataSource;

    @Before
    public void init() throws SQLException, ClassNotFoundException, IOException {
        //Class.forName("org.hsqldb.jdbc.JDBCDriver");
        dataSource = new DataSourcePool("database_test");

        // initialize database
        initDatabase();
    }


    @After
    public void destroy() throws SQLException, ClassNotFoundException, IOException {
        try (Connection connection = dataSource.getConnection(); Statement statement = connection.createStatement()) {
            statement.executeUpdate("DROP TABLE history");
            statement.executeUpdate("DROP TABLE booking");
            statement.executeUpdate("DROP TABLE in_hotel");
            statement.executeUpdate("DROP TABLE room");
            statement.executeUpdate("DROP TABLE employe");
            statement.executeUpdate("DROP TABLE guest");
            statement.executeUpdate("DROP TABLE room_level");
        }
        dataSource.close();
    }

    /**
     * Database initialization for testing i.e.
     * <ul>
     * <li>Creating Table</li>
     * <li>Inserting record</li>
     * </ul>
     *
     * @throws SQLException
     */
    private static void initDatabase() throws SQLException {

        String sqlEmployee = "CREATE TABLE employe (" +
                "id int GENERATED BY DEFAULT AS IDENTITY(START WITH 0, INCREMENT BY 1) PRIMARY KEY, " +
                "first_name varchar(10) NOT NULL, " +
                "surname varchar(15) NOT NULL, " +
                "phone varchar(10) NOT NULL, " +
                "role varchar(15) NOT NULL)";

        String sqlGuest = "CREATE TABLE guest (" +
                "id int GENERATED BY DEFAULT AS IDENTITY(START WITH 0, INCREMENT BY 1) PRIMARY KEY, " +
                "first_name varchar(10) NOT NULL, " +
                "surname varchar(15) NOT NULL, " +
                "phone varchar(10) NOT NULL, " +
                "passport varchar(15) NOT NULL)";

        String sqlBooking = "CREATE TABLE booking (" +
                "id int GENERATED BY DEFAULT AS IDENTITY(START WITH 0, INCREMENT BY 1) PRIMARY KEY, " +
                "phone_guest  varchar(10) NOT NULL, " +
                "status varchar(10) NOT NULL, " +
                "name_guest varchar(10) NOT NULL, " +
                "surname_guest varchar(20) NOT NULL, " +
                "employee int NOT NULL, " +
                "class_room int NOT NULL, " +
                "date_of_settlement date NOT NULL, " +
                "date_of_eviction date NOT NULL, FOREIGN KEY (class_room) REFERENCES room_level(id), FOREIGN KEY (employee) REFERENCES employe(id))";

        String sqlInHotel = "CREATE TABLE in_hotel (" +
                "id int GENERATED BY DEFAULT AS IDENTITY(START WITH 0, INCREMENT BY 1) PRIMARY KEY, " +
                "guest  int NOT NULL, " +
                "employee  int NOT NULL, " +
                "room int NOT NULL, " +
                "class_room int NOT NULL, " +
                "cost int NOT NULL, " +
                "date_of_settlement date NOT NULL, " +
                "date_of_eviction date NOT NULL, FOREIGN KEY (class_room) REFERENCES room_level(id),FOREIGN KEY (room) REFERENCES room(id), FOREIGN KEY (employee) REFERENCES employe(id), FOREIGN KEY (guest) REFERENCES guest(id))";

        String sqlHistory = "CREATE TABLE history (" +
                "id int GENERATED BY DEFAULT AS IDENTITY(START WITH 0, INCREMENT BY 1) PRIMARY KEY, " +
                "guest  varchar(20) NOT NULL, " +
                "employee varchar(20) NOT NULL, " +
                "room int NOT NULL, " +
                "cost int NOT NULL, " +
                "date_of_settlement date NOT NULL, " +
                "date_of_eviction date NOT NULL, FOREIGN KEY (room) REFERENCES room(id))";

        String sqlRoom = "CREATE TABLE room (" +
                "id int GENERATED BY DEFAULT AS IDENTITY(START WITH 0, INCREMENT BY 1) PRIMARY KEY, " +
                "class  int NOT NULL, " +
                "floor  int NOT NULL, " +
                "cost  int NOT NULL, " +
                "numberRoom int NOT NULL, FOREIGN KEY (class) REFERENCES room_level(id))";

        String sqlRoomLevel = "CREATE TABLE room_level (" +
                "id int GENERATED BY DEFAULT AS IDENTITY(START WITH 0, INCREMENT BY 1) PRIMARY KEY, " +
                "level_number  int NOT NULL, " +
                "price  int NOT NULL)";

        String sqlInsert = "INSERt INTO room_level(id, level_number, price) values(null, 0, 12)";
        String sqlInsert2 = "INSERt INTO room_level(id, level_number, price) values(null, 1, 123)";
        String sqlInsert3 = "INSERt INTO room_level(id, level_number, price) values(null, 2, 1234)";

        String sqlInsert4 = "INSERt INTO room(id, class, floor, numberRoom, cost) values(null, 0, 1, 100, 100)";
        String sqlInsert5 = "INSERt INTO room(id, class, floor, numberRoom, cost) values(null, 0, 1, 111, 120)";
        String sqlInsert6 = "INSERt INTO room(id, class, floor, numberRoom, cost) values(null, 1, 2, 200, 200)";
        String sqlInsert7 = "INSERt INTO room(id, class, floor, numberRoom, cost) values(null, 1, 2, 222, 220)";

        String sqlInsert8 = "INSERt INTO employe(id,first_name, surname, phone, role) values(null, 'ivan','ivanovich','380939291','admin')";

        try (Connection connection = dataSource.getConnection(); Statement statement = connection.createStatement()) {
            statement.execute(sqlEmployee);
            statement.execute(sqlRoomLevel);
            statement.execute(sqlGuest);
            statement.execute(sqlRoom);
            statement.execute(sqlBooking);
            statement.execute(sqlHistory);
            statement.execute(sqlInHotel);
            statement.execute(sqlInsert);
            statement.execute(sqlInsert2);
            statement.execute(sqlInsert3);
            statement.execute(sqlInsert4);
            statement.execute(sqlInsert5);
            statement.execute(sqlInsert6);
            statement.execute(sqlInsert7);
            statement.execute(sqlInsert8);

//


//            statement.executeUpdate(
//                    "INSERT INTO employee VALUES (1001,'Vinod Kumar Kashyap', 'vinod@javacodegeeks.com')");
//            statement.executeUpdate("INSERT INTO employee VALUES (1002,'Dhwani Kashyap', 'dhwani@javacodegeeks.com')");
//            statement.executeUpdate("INSERT INTO employee VALUES (1003,'Asmi Kashyap', 'asmi@javacodegeeks.com')");
//            connection.commit();
        }
    }

}
